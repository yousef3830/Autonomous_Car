
ATmega32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000065e  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000590  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000380  00000000  00000000  00000e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  000011f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000335  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  000015c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000165b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_10>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "LIB/STD_Macros.h"

int main(void)
{
	
	SET_BIT(DDRB,3);
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	88 60       	ori	r24, 0x08	; 8
  80:	87 bb       	out	0x17, r24	; 23
	Timer0_CTC_INIT();
  82:	0e 94 44 00 	call	0x88	; 0x88 <Timer0_CTC_INIT>
  86:	ff cf       	rjmp	.-2      	; 0x86 <main+0xa>

00000088 <Timer0_CTC_INIT>:
}


void Timer0_CTC_INIT(){
	
	CLR_BIT(TCCR0,WGM00);       //compare(CTC mode) mode
  88:	83 b7       	in	r24, 0x33	; 51
  8a:	8f 7b       	andi	r24, 0xBF	; 191
  8c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
  8e:	83 b7       	in	r24, 0x33	; 51
  90:	88 60       	ori	r24, 0x08	; 8
  92:	83 bf       	out	0x33, r24	; 51

	SET_BIT(TCCR0,COM00);      //toggle OC0
  94:	83 b7       	in	r24, 0x33	; 51
  96:	80 61       	ori	r24, 0x10	; 16
  98:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,COM01);
  9a:	83 b7       	in	r24, 0x33	; 51
  9c:	8f 7d       	andi	r24, 0xDF	; 223
  9e:	83 bf       	out	0x33, r24	; 51

	SET_BIT(TCCR0,CS00);      //clock select
  a0:	83 b7       	in	r24, 0x33	; 51
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS01);
  a6:	83 b7       	in	r24, 0x33	; 51
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,CS02);
  ac:	83 b7       	in	r24, 0x33	; 51
  ae:	8b 7f       	andi	r24, 0xFB	; 251
  b0:	83 bf       	out	0x33, r24	; 51

	sei();                     //Global interrupt
  b2:	78 94       	sei

	SET_BIT(TIMSK,OCIE0);      //compare mode Timer0 interrupt enable
  b4:	89 b7       	in	r24, 0x39	; 57
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	89 bf       	out	0x39, r24	; 57

	OCR0=125;
  ba:	8d e7       	ldi	r24, 0x7D	; 125
  bc:	8c bf       	out	0x3c, r24	; 60
  be:	08 95       	ret

000000c0 <__vector_11>:

}



ISR(TIMER0_OVF_vect){
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
	counter +=1;
  ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	if(counter == 16){
  e0:	40 97       	sbiw	r24, 0x10	; 16
  e2:	49 f4       	brne	.+18     	; 0xf6 <__vector_11+0x36>
		counter = 0;
  e4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		TCNT0 = 190;
  ec:	8e eb       	ldi	r24, 0xBE	; 190
  ee:	82 bf       	out	0x32, r24	; 50
		
		TOG_BIT(PORTB,7);
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	80 58       	subi	r24, 0x80	; 128
  f4:	88 bb       	out	0x18, r24	; 24
	}
}
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <__vector_10>:


ISR(TIMER0_COMP_vect){
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
	counter+=1;
 112:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 116:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 120:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	if(counter==125){
 124:	8d 37       	cpi	r24, 0x7D	; 125
 126:	91 05       	cpc	r25, r1
 128:	39 f4       	brne	.+14     	; 0x138 <__vector_10+0x34>
		counter=0;
 12a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 12e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		TOG_BIT(PORTB,7);
 132:	88 b3       	in	r24, 0x18	; 24
 134:	80 58       	subi	r24, 0x80	; 128
 136:	88 bb       	out	0x18, r24	; 24
	}
    
	
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
